import json
import asyncio
from playwright.async_api import async_playwright, TimeoutError as PlaywrightTimeoutError

# Your JSON data
actions_json = {
    "title": "GetMachineInv",
    "steps": [
        {
            "type": "setViewport",
            "width": 1865,
            "height": 1214,
            "deviceScaleFactor": 1,
            "isMobile": False,
            "hasTouch": False,
            "isLandscape": False
        },
        {
            "type": "navigate",
            "url": "https://www.autochlor.net/wps/Default.aspx?Module=b88d43a9-0634-4fec-af0f-a3632d39246c",
            "assertedEvents": [
                {
                    "type": "navigation",
                    "url": "https://www.autochlor.net/wps/Default.aspx?Module=b88d43a9-0634-4fec-af0f-a3632d39246c",
                    "title": "[VIEW CALENDAR] - Auto-Chlor System Web Portal V4.1.6.7"
                }
            ]
        },
        {
            "type": "click",
            "target": "main",
            "selectors": [
                [
                    "aria/REPORTS[role=\"link\"]"
                ],
                [
                    "#_MenuModulen6 a"
                ],
                [
                    "xpath=//*[@id=\"_MenuModulen6\"]/table/tbody/tr/td[1]/a"
                ],
                [
                    "pierce/#_MenuModulen6 a"
                ]
            ],
            "offsetY": 8.5,
            "offsetX": 32.77081298828125
        },
        {
            "type": "click",
            "target": "main",
            "selectors": [
                [
                    "aria/ROUTE ADMIN[role=\"link\"]"
                ],
                [
                    "#_MenuModulen80 a"
                ],
                [
                    "xpath=//*[@id=\"_MenuModulen80\"]/td/table/tbody/tr/td[1]/a"
                ],
                [
                    "pierce/#_MenuModulen80 a"
                ],
                [
                    "text=ROUTE ADMIN"
                ]
            ],
            "offsetY": 3.8333282470703125,
            "offsetX": 64
        },
        {
            "type": "click",
            "target": "main",
            "selectors": [
                [
                    "aria/ROUTE MANAGEMENT[role=\"link\"]"
                ],
                [
                    "#_MenuModulen81 a"
                ],
                [
                    "xpath=//*[@id=\"_MenuModulen81\"]/td/table/tbody/tr/td[1]/a"
                ],
                [
                    "pierce/#_MenuModulen81 a"
                ],
                [
                    "text=ROUTE MANAGEMENT"
                ]
            ],
            "offsetY": 0.8333282470703125,
            "offsetX": 66
        },
        {
            "type": "click",
            "target": "main",
            "selectors": [
                [
                    "aria/ROUTE OPERATIONS[role=\"link\"]"
                ],
                [
                    "#_MenuModulen82 a"
                ],
                [
                    "xpath=//*[@id=\"_MenuModulen82\"]/td/table/tbody/tr/td[1]/a"
                ],
                [
                    "pierce/#_MenuModulen82 a"
                ],
                [
                    "text=ROUTE OPERATIONS"
                ]
            ],
            "offsetY": 8.833328247070312,
            "offsetX": 52
        },
        {
            "type": "click",
            "target": "main",
            "selectors": [
                [
                    "aria/EQUIPMENT MODEL COUNT[role=\"link\"]"
                ],
                [
                    "#_MenuModulen139 a"
                ],
                [
                    "xpath=//*[@id=\"_MenuModulen139\"]/td/table/tbody/tr/td/a"
                ],
                [
                    "pierce/#_MenuModulen139 a"
                ],
                [
                    "text=EQUIPMENT MODEL COUNT"
                ]
            ],
            "offsetY": 5.33331298828125,
            "offsetX": 70,
            "assertedEvents": [
                {
                    "type": "navigation",
                    "url": "https://www.autochlor.net/wps/Default.aspx?Module=82e59086-17a1-4572-98d4-59033ffd3473",
                    "title": ""
                }
            ]
        },
        {
            "type": "change",
            "value": "BOOSTER HEATER",
            "selectors": [
                [
                    "#ctl03__TSListBoxMachineModel_Type_DstList"
                ],
                [
                    "xpath=//*[@id=\"ctl03__TSListBoxMachineModel_Type_DstList\"]"
                ],
                [
                    "pierce=#ctl03__TSListBoxMachineModel_Type_DstList"
                ]
            ],
            "target": "main"
        },
        {
            "type": "click",
            "target": "main",
            "selectors": [
                [
                    "aria/BOOSTER HEATER"
                ],
                [
                    "tr:nth-of-type(6) option:nth-of-type(1)"
                ],
                [
                    "xpath=//*[@id=\"ctl03__TSListBoxMachineModel_Type_DstList\"]/option[1]"
                ],
                [
                    "pierce=tr:nth-of-type(6) option:nth-of-type(1)"
                ]
            ],
            "offsetY": 6.33331298828125,
            "offsetX": 60.75
        },
        {
            "type": "click",
            "target": "main",
            "selectors": [
                [
                    "aria/ALL[0] ⇉ ⇀ ↼ ⇇ SELECTED[3] BOOSTER HEATER",
                    "aria/↼"
                ],
                [
                    "tr:nth-of-type(6) input:nth-of-type(3)"
                ],
                [
                    "xpath=//*[@id=\"ctl03__TSListBoxMachineModel_Type\"]/div/div[2]/input[3]"
                ],
                [
                    "pierce=tr:nth-of-type(6) input:nth-of-type(3)"
                ]
            ],
            "offsetY": 8.9166259765625,
            "offsetX": 7.9375
        },
        {
            "type": "change",
            "value": "DISPENSER",
            "selectors": [
                [
                    "#ctl03__TSListBoxMachineModel_Type_DstList"
                ],
                [
                    "xpath=//*[@id=\"ctl03__TSListBoxMachineModel_Type_DstList\"]"
                ],
                [
                    "pierce=#ctl03__TSListBoxMachineModel_Type_DstList"
                ]
            ],
            "target": "main"
        },
        {
            "type": "click",
            "target": "main",
            "selectors": [
                [
                    "aria/DISPENSER"
                ],
                [
                    "tr:nth-of-type(6) option:nth-of-type(2)"
                ],
                [
                    "xpath=//*[@id=\"ctl03__TSListBoxMachineModel_Type_DstList\"]/option[2]"
                ],
                [
                    "pierce=tr:nth-of-type(6) option:nth-of-type(2)"
                ]
            ],
            "offsetY": 4.33331298828125,
            "offsetX": 31.75
        },
        {
            "type": "click",
            "target": "main",
            "selectors": [
                [
                    "aria/ALL[1] ⇉ ⇀ ↼ ⇇ SELECTED[2] DISPENSER",
                    "aria/↼"
                ],
                [
                    "tr:nth-of-type(6) input:nth-of-type(3)"
                ],
                [
                    "xpath=//*[@id=\"ctl03__TSListBoxMachineModel_Type\"]/div/div[2]/input[3]"
                ],
                [
                    "pierce=tr:nth-of-type(6) input:nth-of-type(3)"
                ]
            ],
            "offsetY": 3.9166259765625,
            "offsetX": 3.9375
        },
        {
            "type": "click",
            "target": "main",
            "selectors": [
                [
                    "#ctl03__CheckBoxEnableGroup"
                ],
                [
                    "xpath=//*[@id=\"ctl03__CheckBoxEnableGroup\"]"
                ],
                [
                    "pierce=#ctl03__CheckBoxEnableGroup"
                ]
            ],
            "offsetY": 6.333251953125,
            "offsetX": 5.604156494140625
        },
        {
            "type": "click",
            "target": "main",
            "selectors": 
            [
                [
                    "#ctl03__CheckBoxExcel"
                ],
                [
                    "xpath=//*[@id=\"ctl03__CheckBoxExcel\"]"
                ],
                [
                    "pierce=#ctl03__CheckBoxExcel"
                ]
            ],
            "offsetY": 1.6666259765625,
            "offsetX": 5.604156494140625
        },
        {
            "type": "click",
            "target": "main",
            "selectors": [
                [
                    "aria/PRINT"
                ],
                [
                    "#ctl03__ButtonPrint"
                ],
                [
                    "xpath=//*[@id=\"ctl03__ButtonPrint\"]"
                ],
                [
                    "pierce=#ctl03__ButtonPrint"
                ],
                [
                    "text=PRINT"
                ]
            ],
            "offsetY": 2,
            "offsetX": 32.97916650772095
        }
    ]
}

async def execute_actions(actions):
    async with async_playwright() as p:
        try:
            # Extract viewport settings
            viewport_settings = actions["steps"][0]
            context = await p.chromium.launch(headless=False, slow_mo=50).new_context(
                viewport={
                    "width": viewport_settings["width"],
                    "height": viewport_settings["height"]
                },
                device_scale_factor=viewport_settings["deviceScaleFactor"],
                is_mobile=viewport_settings["isMobile"],
                has_touch=viewport_settings["hasTouch"],
                is_landscape=viewport_settings["isLandscape"]
            )
            page = await context.new_page()

            for step in actions["steps"]:
                step_type = step["type"]

                if step_type == "setViewport":
                    # Already handled during context creation
                    print(f"Viewport set to width={viewport_settings['width']}, height={viewport_settings['height']}")
                    continue

                elif step_type == "navigate":
                    url = step["url"]
                    print(f"Navigating to {url}")
                    await page.goto(url, timeout=60000)  # 60 seconds timeout

                    # Handle assertedEvents if any
                    for event in step.get("assertedEvents", []):
                        if event["type"] == "navigation":
                            expected_url = event["url"]
                            expected_title = event.get("title", "")
                            try:
                                await page.wait_for_url(expected_url, timeout=60000)
                                if expected_title:
                                    actual_title = await page.title()
                                    assert actual_title == expected_title, f"Title mismatch: Expected '{expected_title}', got '{actual_title}'"
                                print(f"Navigation to {expected_url} successful with title '{expected_title}'")
                            except PlaywrightTimeoutError:
                                print(f"Navigation to {expected_url} timed out or title did not match.")
                                await browser.close()
                                return

                elif step_type == "click":
                    selectors = step["selectors"]
                    clicked = False
                    for selector_group in selectors:
                        for selector in selector_group:
                            try:
                                print(f"Attempting to click selector: {selector}")
                                # Determine selector type
                                if selector.startswith("xpath="):
                                    actual_selector = selector.replace("xpath=", "")
                                    await page.wait_for_selector(f"xpath={actual_selector}", timeout=5000)
                                    element = page.locator(f"xpath={actual_selector}")
                                elif selector.startswith("aria/"):
                                    actual_selector = selector.replace("aria/", "")
                                    await page.wait_for_selector(f"aria/{actual_selector}", timeout=5000)
                                    element = page.locator(f"aria/{actual_selector}")
                                elif selector.startswith("pierce/"):
                                    actual_selector = selector.replace("pierce/", "")
                                    await page.wait_for_selector(f"pierce/{actual_selector}", timeout=5000)
                                    element = page.locator(f"pierce/{actual_selector}")
                                elif selector.startswith("text="):
                                    actual_selector = selector.replace("text=", "")
                                    await page.wait_for_selector(f"text={actual_selector}", timeout=5000)
                                    element = page.locator(f"text={actual_selector}")
                                else:
                                    # Assume it's a CSS selector
                                    await page.wait_for_selector(selector, timeout=5000)
                                    element = page.locator(selector)

                                if element:
                                    offset_x = step.get("offsetX", 0)
                                    offset_y = step.get("offsetY", 0)
                                    await element.click(position={"x": offset_x, "y": offset_y})
                                    print(f"Clicked on selector: {selector} at offset ({offset_x}, {offset_y})")
                                    clicked = True
                                    break
                            except PlaywrightTimeoutError:
                                print(f"Selector not found or not clickable: {selector}")
                                continue
                        if clicked:
                            break

                    if not clicked:
                        print(f"Failed to click any of the provided selectors for step: {step}")
                        await browser.close()
                        return

                    # Handle assertedEvents if any
                    for event in step.get("assertedEvents", []):
                        if event["type"] == "navigation":
                            expected_url = event["url"]
                            expected_title = event.get("title", "")
                            try:
                                await page.wait_for_url(expected_url, timeout=60000)
                                if expected_title:
                                    actual_title = await page.title()
                                    assert actual_title == expected_title, f"Title mismatch: Expected '{expected_title}', got '{actual_title}'"
                                print(f"Navigation to {expected_url} successful with title '{expected_title}'")
                            except PlaywrightTimeoutError:
                                print(f"Navigation to {expected_url} timed out or title did not match.")
                                await browser.close()
                                return

                elif step_type == "change":
                    selectors = step["selectors"]
                    value = step["value"]
                    changed = False
                    for selector_group in selectors:
                        for selector in selector_group:
                            try:
                                print(f"Attempting to select option '{value}' using selector: {selector}")
                                # Determine selector type
                                if selector.startswith("xpath="):
                                    actual_selector = selector.replace("xpath=", "")
                                    await page.wait_for_selector(f"xpath={actual_selector}", timeout=5000)
                                    select_element = page.locator(f"xpath={actual_selector}")
                                elif selector.startswith("pierce/"):
                                    actual_selector = selector.replace("pierce/", "")
                                    await page.wait_for_selector(f"pierce/{actual_selector}", timeout=5000)
                                    select_element = page.locator(f"pierce/{actual_selector}")
                                else:
                                    # Assume it's a CSS selector
                                    await page.wait_for_selector(selector, timeout=5000)
                                    select_element = page.locator(selector)

                                if select_element:
                                    tag_name = await select_element.evaluate("element => element.tagName.toLowerCase()")
                                    if tag_name == "select":
                                        # Use select_option for <select> elements
                                        await select_element.select_option(label=value)
                                        print(f"Selected option '{value}' in select element '{selector}'")
                                    else:
                                        # For custom dropdowns, click and select the option
                                        await select_element.click()
                                        await page.click(f"text={value}")
                                        print(f"Clicked option '{value}' in custom dropdown '{selector}'")
                                    changed = True
                                    break
                            except PlaywrightTimeoutError:
                                print(f"Selector not found: {selector}")
                                continue
                        if changed:
                            break

                    if not changed:
                        print(f"Failed to change value using any of the provided selectors for step: {step}")
                        await browser.close()
                        return

                else:
                    print(f"Unsupported step type: {step_type}")

                # Optional: Add a small delay between steps
                await asyncio.sleep(1)

            # Final actions (like clicking PRINT)
            print("All steps executed successfully. Keeping the browser open for inspection.")
            await asyncio.sleep(10)  # Keep the browser open for 10 seconds
            await browser.close()

        except Exception as e:
            print(f"An error occurred: {e}")

# Execute the actions
asyncio.run(execute_actions(actions_json))